#!/usr/bin/env python3


import argparse
import polars as pl
from time import time
import networkx as nx
import pickle


arg_parser = argparse.ArgumentParser()
arg_parser.add_argument("--saved_graph_path", type=str, required=True)
arg_parser.add_argument("--save_path", type=str, required=True)
arg_parser.add_argument("--algorithm", type=str, default="degree")
arg_parser.add_argument("--follower_relations_path", type=str, default=None)


# [File Summary]
# This script computes the centrality of the users.
# [Configs]
# algorithm:
#   The algorithm to compute the centrality.
# [Inputs]
# saved_graph_path:
#   Path to the saved graph.
#   The graph is generated by rt_path_clustering.py.
# follower_relations_path:
#   Path to the follower relations.
# [Outputs]
# save_path:
#   Path to save the centrality.


def main(args):
    t0 = time()
    print("Loading Graph...")
    G = pickle.load(open(args.saved_graph_path, "rb"))
    G = G.to_directed()

    user_ids = G.nodes
    print("Number of Users: ", len(user_ids))

    print("Computing Centrality...")
    if args.algorithm == "degree":
        degrees = G.in_degree(weight="weight")
        pl.DataFrame(
            list(degrees),
            orient="row",
            schema=["user_id", "degree"],
        ).write_parquet(args.save_path)
    elif args.algorithm == "pagerank":
        pr = nx.pagerank(G, weight="weight")
        pl.DataFrame(
            list(pr.items()),
            orient="row",
            schema=["user_id", "pagerank"]
        ).write_parquet(args.save_path)


    t1 = time()
    print("Time: ", t1 - t0)


if __name__ == "__main__":
    args = arg_parser.parse_args()
    main(args)
