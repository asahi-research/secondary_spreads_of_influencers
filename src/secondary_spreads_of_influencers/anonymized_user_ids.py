#!/usr/bin/env python3


import os
import argparse
import polars as pl


arg_parser = argparse.ArgumentParser()
arg_parser.add_argument("--user_influence_score_path", type=str, required=True)
arg_parser.add_argument("--aggregated_virtual_timeline_dir", type=str, required=True)
arg_parser.add_argument("--influence_column_name", type=str, default="hg-index")
arg_parser.add_argument("--user_influence_save_dir", type=str, required=True)
arg_parser.add_argument("--anonymized_virtual_timeline_save_dir", type=str, required=True)


# [File Summary]
# This script anonymizes the user ids in the influence score and the virtual timelines.
# [Configs]
# influence_column_name:
#   The column name of the influence score.
# [Inputs]
# user_influence_score_path:
#   Path to the user influence score.
#   This file is generated by compute_h_index.py or compute_centrality_from_retweets.py.
# aggregated_virtual_timeline_dir:
#   Path to the directory containing the aggregated virtual timelines.
#   This directory is generated by aggregate_second_spreads.py.
# [Outputs]
# user_influence_save_dir:
#    Path to save the anonymized user influence score.
#    The file name is the same as the input file name, but with "_anonymized" appended.
#  anonymized_virtual_timeline_save_dir:
#    Path to save the anonymized virtual timelines.
#    The file name is the same as the input file name, but with "_anonymized" appended.


def new_file_name(influence_score_path):
    influence_score_file_name = os.path.basename(influence_score_path)
    return influence_score_file_name.replace(".parquet", "_anonymized.parquet")


def main(args):
    df_influence = pl.read_parquet(args.user_influence_score_path)

    virtual_timeline_files = os.listdir(args.aggregated_virtual_timeline_dir)

    df_influence = df_influence.sort(args.influence_column_name, descending=True)
    df_influence = df_influence.with_columns(
        pl.col(args.influence_column_name).rank(method='ordinal').alias("new_user_id"),
    )

    for virtual_timeline_file in virtual_timeline_files:
        df_virtual_timeline = pl.read_parquet(
            os.path.join(args.aggregated_virtual_timeline_dir, virtual_timeline_file)
        )

        old_shape = df_virtual_timeline.shape
        df_virtual_timeline = df_virtual_timeline.join(
            df_influence[["user_id", "new_user_id"]],
            left_on="followee",
            right_on="user_id",
            how="inner",
        )
        assert old_shape[0] == df_virtual_timeline.shape[0]

        df_virtual_timeline.drop("followee").rename(
            {"new_user_id": "followee"}
        ).write_parquet(
            os.path.join(args.anonymized_virtual_timeline_save_dir,
                         new_file_name(virtual_timeline_file))
        )

    df_influence.drop("user_id").rename(
        {"new_user_id": "user_id"}
    ).write_parquet(
        os.path.join(args.user_influence_save_dir,
                     new_file_name(args.user_influence_score_path))
    )


if __name__ == "__main__":
    args = arg_parser.parse_args()
    main(args)
