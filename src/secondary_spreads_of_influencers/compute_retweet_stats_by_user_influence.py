#!/usr/bin/env python3

import argparse
import os
import polars as pl


arg_parser = argparse.ArgumentParser()
arg_parser.add_argument("--canonicalized_source_tweets_path", type=str, required=True)
arg_parser.add_argument("--retweeted_tweets_dir", type=str, required=True)
arg_parser.add_argument("--user_influence_score_path", type=str, required=True)
arg_parser.add_argument("--influence_column_name", type=str, default="h-index")


# [File Summary]
# This script computes retweet statistics by user influence.
# [Configs]
# influence_column_name:
#   The column name of the influence score.
# [Inputs]
# canonicalized_source_tweets_path:
#   Path to the canonicalized source tweets.
#   The source tweets are canonicalized by the canonicalize_source_tweets.py.
# retweeted_tweets_dir:
#   Directory to the retweeted tweets.
#   This files outputed by format_retweeted_data.py.
# user_influence_score_path:
#   Path to the user influence score.
#   This file is generated by compute_h_index.py or compute_centrality_from_retweets.py.


def main(args):
    print("Loading retweeted tweets...")
    retweeted_tweets_files = os.listdir(args.retweeted_tweets_dir)
    retweeted_tweets_paths = [os.path.join(args.retweeted_tweets_dir, f)
                              for f in retweeted_tweets_files]

    df_list = []
    for i, path in enumerate(retweeted_tweets_paths):
        df_rt = pl.read_parquet(path)
        df_list.append(df_rt)
    df_rt = pl.concat(df_list)
    del df_list
    df_rt = df_rt.filter(pl.col("user_id").is_not_null())
    df_rt = df_rt[["source_tweet_id", "user_id", "tweet_id"]]
    df_rt = df_rt.filter(pl.col("source_tweet_id").is_not_null())

    df_rt = df_rt.group_by("source_tweet_id").agg(
        pl.col("user_id").n_unique().alias("num_retweets")
    )

    df_source = pl.read_parquet(args.canonicalized_source_tweets_path)
    df_source = df_source.filter(pl.col("tweet_id").is_not_null())
    df_source = df_source[["tweet_id", "user_id"]]

    df_source = df_source.join(
        df_rt,
        left_on="tweet_id",
        right_on="source_tweet_id",
        how="inner")

    df_ui = pl.read_parquet(args.user_influence_score_path)
    df_ui = df_ui.with_columns(
        pl.col(args.influence_column_name).rank("min").alias("rank"))
    df_ui = df_ui.with_columns(
        ((pl.col("rank") / pl.col("rank").max())).alias("influence_score"))
    df_ui = df_ui.with_columns(
        pl.col(args.influence_column_name).qcut(
            [0.5, 0.7, 0.9, 0.95, 0.99],
            labels=["low", "low-mid", "mid", "high-mid", "high", "very-high"],
            allow_duplicates=True,
        ).alias("influence_score_group"))

    df_ui = df_ui.join(
        df_source,
        on="user_id",
        how="outer"
    )

    df_result = df_ui.group_by("influence_score_group").agg(
        pl.col("num_retweets").sum().alias("num_retweets"),
        pl.col("num_retweets").mean().alias("mean_num_retweets"),
        pl.col("num_retweets").max().alias("max_num_retweets"),
    )

    df_result = df_result.sort("influence_score_group", descending=True)

    print(df_result)


if __name__ == "__main__":
    args = arg_parser.parse_args()
    main(args)
