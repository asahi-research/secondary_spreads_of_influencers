#!/usr/bin/env python3

import argparse
import os
import polars as pl
from polars import col
from time import time
import numpy as np


arg_parser = argparse.ArgumentParser()
arg_parser.add_argument("--save_path", type=str, required=True)
arg_parser.add_argument("--canonicalized_source_tweets_path", type=str, required=True)
arg_parser.add_argument("--retweeted_tweets_dir", type=str, required=True)
arg_parser.add_argument("--follower_relations_path", type=str, default=None)


# [File Summary]
# This script computes the h-index and hg-index of the users.
# [Inputs]
# canonicalized_source_tweets_path:
#   Path to the canonicalized source tweets.
#   The source tweets are canonicalized by the canonicalize_source_tweets.py.
# retweeted_tweets_dir:
#   Directory to the retweeted tweets.
#   This files outputed by format_retweeted_data.py.
# follower_relations_path:
#   Path to the follower relations.
#   This file is generated by build_follower_relations_data.py.


def main(args):
    t0 = time()

    print("Loading canonicalized source tweets...")
    df_source = pl.read_parquet(args.canonicalized_source_tweets_path)
    df_source = df_source.filter(df_source["tweet_id"].is_not_null())
    df_source = df_source[["tweet_id", "user_id"]]

    print("Loading retweeted tweets...")
    retweeted_tweets_files = os.listdir(args.retweeted_tweets_dir)
    retweeted_tweets_paths = [os.path.join(args.retweeted_tweets_dir, f)
                              for f in retweeted_tweets_files]

    df_list = []
    for i, path in enumerate(retweeted_tweets_paths):
        df_rt = pl.read_parquet(path)
        df_list.append(df_rt)
    df_rt = pl.concat(df_list)
    del df_list

    df_rt = df_rt.filter(df_rt["user_id"].is_not_null())
    df_rt = df_rt[["source_tweet_id", "user_id", "tweet_id"]]
    df_rt = df_rt.filter(df_rt["source_tweet_id"].is_not_null())

    if args.follower_relations_path:
        df_follower_relations = pl.read_parquet(args.follower_relations_path)
        followers = df_follower_relations["follower"].to_list()
        followees = df_follower_relations["followee"].to_list()
        target_user_ids = set(followers + followees)
        df_rt = df_rt.filter(df_rt["user_id"].is_in(target_user_ids))

    print("Aggregating retweets...")
    df_tweet_count = df_rt.group_by("source_tweet_id").agg(
        col("user_id").n_unique().alias("num_rt_users")
    )

    print("Joining source tweets and retweets...")
    df = df_source.join(
        df_tweet_count,
        left_on="tweet_id",
        right_on="source_tweet_id",
        how="inner")

    print("Computing hg-index...")
    df = df.group_by("user_id", maintain_order=True).agg(
        col("tweet_id").n_unique().alias("num_tweets"),
        col("num_rt_users"),
        col("num_rt_users").rank(
            method="ordinal", descending=True).alias("rank"),
    )
    print(f"num_users: {len(df)}")
    df = df.explode(["num_rt_users", "rank"]).with_columns(
        (col("num_rt_users") >= col("rank")).alias("is_over_rank"),
    )
    df = df.sort(["user_id", "rank"])
    df = df.with_columns(
        col("num_rt_users").cum_sum().over("user_id").alias("cum_num_rt_users"),
        col("num_rt_users").sqrt().alias("num_rt_users_sqrt"),
        (col("rank") * col("rank")).alias("rank_squared"),
    )
    df = df.with_columns(
        (col("cum_num_rt_users") >= col("rank_squared")).alias("cum_is_over_rank_sq"),
        (col("num_rt_users") >= col("rank_squared")).alias("is_over_rank_sq"),
    )
    df = df.group_by("user_id", maintain_order=True).agg(
        col("num_tweets").first(),
        col("is_over_rank").sum().alias("h-index"),
        (col("cum_is_over_rank_sq").sum() - 1).alias("idx"),
        col("num_rt_users"),
        col("num_rt_users_sqrt"),
        col("rank"),
        (col("is_over_rank").cum_sum() - 1).cast(pl.Int32).unique().alias("indices"),
    )

    def compute_g_index(num_rt_users):
        num_rt_users = np.array(sorted(num_rt_users, reverse=True))
        cumsum = np.cumsum(num_rt_users)
        g = 1
        while g <= len(num_rt_users) and cumsum[g-1] >= g**2:
            g += 1
        return g - 1

    df = df.with_columns(
        col("rank").list.get(col("idx")).alias("g-index"),
    ).drop(["idx", "rank", "indices", "num_rt_users", "num_rt_users_sqrt"])

    df = df.with_columns(
        (col("h-index") * col("g-index")).sqrt().alias("hg-index"),
    )

    user_ids = sorted(list(set(df_rt["user_id"].unique().to_list() + df_source["user_id"].unique().to_list())))
    df = pl.DataFrame({
        "user_id": user_ids
    }).join(df, on="user_id", how="left")
    df = df.fill_null(0)

    df = df.sort("hg-index", descending=True)

    print("Saving...")
    df.write_parquet(args.save_path)

    t1 = time()
    print("Time: ", t1 - t0)


if __name__ == "__main__":
    args = arg_parser.parse_args()
    main(args)
